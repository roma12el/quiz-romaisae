import streamlit as st
import pandas as pd
from io import BytesIO
import qrcode
import os
import matplotlib.pyplot as plt
import plotly.express as px

# =========================
# CONFIGURATION DE LA PAGE
# =========================
st.set_page_config(
    page_title="Quiz ‚Äì R√©glementation des March√©s Financiers",
    layout="centered"
)

# =========================
# STYLE GLOBAL MODERNE
# =========================
st.markdown("""
    <style>
    /* Arri√®re-plan d√©grad√© doux */
    .stApp {
        background: linear-gradient(135deg, #f0f4ff, #e8f0fe);
    }

    /* Titres */
    h1, h2, h3 {
        color: #1e3a8a !important;
        font-family: 'Poppins', sans-serif;
    }

    /* Questions */
    .stRadio > div {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0px 4px 10px rgba(0,0,0,0.05);
        margin-bottom: 12px;
    }

    /* Boutons stylis√©s */
    button[kind="primary"] {
        background-color: #3B82F6 !important;
        color: white !important;
        border-radius: 10px !important;
        font-weight: bold !important;
        border: none !important;
        transition: 0.3s;
    }
    button[kind="primary"]:hover {
        background-color: #2563eb !important;
        transform: scale(1.03);
    }

    /* Carte de note */
    .note-bar {
        width: 300px;
        border-radius: 12px;
        overflow: hidden;
        background: #ddd;
        margin: 15px auto;
    }
    .note-fill {
        height: 40px;
        text-align: center;
        font-weight: bold;
        color: white;
        line-height: 40px;
        border-radius: 12px;
    }

    /* Tableau moderne */
    div[data-testid="stDataFrame"] table {
        border-radius: 10px;
        overflow: hidden;
        border: 1px solid #ccc;
    }
    </style>
""", unsafe_allow_html=True)

# =========================
# IMAGE D‚ÄôEN-T√äTE
# =========================
try:
    st.image("pag de garde.png", use_container_width=True)
except Exception:
    st.warning("‚ö†Ô∏è Image d‚Äôen-t√™te introuvable (pag de garde.png).")

st.markdown("""
    <h2 style='text-align:center; color:#1e40af; font-weight:bold;'>
    üéì Testez vos connaissances sur la r√©glementation des march√©s financiers !
    </h2>
""", unsafe_allow_html=True)

st.title("Quiz sur la R√©glementation des March√©s Financiers et R√¥le des Autorit√©s de March√© ")

# =========================
# QUESTIONS DU QUIZ
# =========================
questions = {
    "1Ô∏è‚É£ Quelle institution supervise le march√© financier au Maroc ?":
        ["Bank Al-Maghrib", "Minist√®re des Finances", "AMMC", "CDG", "AMMC"],
    "2Ô∏è‚É£ Quelle est la principale mission de l‚ÄôAMMC ?":
        ["Contr√¥ler la fiscalit√©", "Prot√©ger les investisseurs", "√âmettre la monnaie", "Fixer les taux d‚Äôint√©r√™t", "Prot√©ger les investisseurs"],
    "3Ô∏è‚É£ Quelle autorit√© est responsable de la politique mon√©taire ?":
        ["AMMC", "Bank Al-Maghrib", "CDVM", "CMR", "Bank Al-Maghrib"],
    "4Ô∏è‚É£ Quelle loi encadre le march√© des valeurs mobili√®res au Maroc ?":
        ["Loi 12-03", "Loi 43-12", "Loi 17-95", "Loi 20-19", "Loi 43-12"],
    "5Ô∏è‚É£ Quel est le r√¥le principal d‚Äôune autorit√© financi√®re ?":
        ["Favoriser la sp√©culation", "R√©guler et contr√¥ler les march√©s", "Fixer les prix des actions", "Prot√©ger les banques", "R√©guler et contr√¥ler les march√©s"],
    "6Ô∏è‚É£ Quelle entit√© veille √† la stabilit√© du syst√®me bancaire marocain ?":
        ["Bank Al-Maghrib", "AMMC", "Minist√®re du Commerce", "Tr√©sor G√©n√©ral du Royaume", "Bank Al-Maghrib"],
    "7Ô∏è‚É£ Quelle institution g√®re les cotations √† la Bourse de Casablanca ?":
        ["AMMC", "Bourse de Casablanca", "Bank Al-Maghrib", "CDVM", "Bourse de Casablanca"],
    "8Ô∏è‚É£ Quelle est la mission du Conseil D√©ontologique des Valeurs Mobili√®res (CDVM) avant sa transformation ?":
        ["R√©gulation du march√© financier", "Supervision des banques", "Audit des entreprises publiques", "Fiscalit√© des investisseurs", "R√©gulation du march√© financier"],
    "9Ô∏è‚É£ Quelle autorit√© veille √† la transparence de l‚Äôinformation financi√®re ?":
        ["AMMC", "ONCF", "Minist√®re de l‚ÄôInt√©rieur", "BAM", "AMMC"],
    "üîü Quelle est la principale finalit√© de la r√©glementation des march√©s financiers ?":
        ["Limiter la concurrence", "Prot√©ger les investisseurs et assurer la confiance", "Encourager les monopoles", "R√©duire les taux d‚Äôint√©r√™t", "Prot√©ger les investisseurs et assurer la confiance"]
}

# =========================
# IDENTIT√â UTILISATEUR
# =========================
st.subheader("Veuillez saisir vos informations")

col1, col2 = st.columns([2, 1])
with col1:
    nom = st.text_input("Nom et pr√©nom :")

with col2:
    st.write("**Genre :**")
    colf, colm = st.columns(2)
    with colf:
        if st.button("üë© F√©minin"):
            st.session_state["genre"] = "F√©minin"
    with colm:
        if st.button("üë® Masculin"):
            st.session_state["genre"] = "Masculin"

genre = st.session_state.get("genre", "Non sp√©cifi√©")
st.info(f"Genre s√©lectionn√© : **{genre}**")

# =========================
# QUIZ
# =========================
st.divider()
st.write("R√©pondez √† toutes les questions (une seule r√©ponse possible) :")

reponses = {}
score = 0

for question, options in questions.items():
    reponse = st.radio(question, options[:-1], key=question)
    reponses[question] = reponse
    if reponse == options[-1]:
        score += 1

# =========================
# SOUMISSION DU QUIZ
# =========================
if st.button("üìù Soumettre mes r√©ponses"):
    if nom.strip() == "":
        st.warning("Veuillez entrer votre nom et pr√©nom avant de soumettre.")
    else:
        total = len(questions)
        pourcentage = round((score / total) * 100, 2)

        result = {q: (1 if reponses[q] == questions[q][-1] else 0) for q in questions}
        data_row = {"Nom": nom, "Genre": genre, "Score": score, "Pourcentage": pourcentage, **result}

        try:
            if os.path.exists("scores.csv") and os.path.getsize("scores.csv") > 0:
                df_old = pd.read_csv("scores.csv")
            else:
                df_old = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])
        except Exception:
            df_old = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])

        df = pd.concat([df_old, pd.DataFrame([data_row])], ignore_index=True)

        try:
            df.to_csv("scores.csv", index=False)
        except Exception:
            st.warning("‚ö†Ô∏è Impossible d‚Äôenregistrer les r√©sultats (v√©rifiez les permissions).")

        st.success(f"{nom}, votre score est de {pourcentage}% ({score}/{total}).")

        # NOTE SUR 20 (design moderne)
        note_sur_20 = round((score / total) * 20, 2)
        color = "#4CAF50" if note_sur_20 >= 16 else "#FFC107" if note_sur_20 >= 10 else "#F44336"

        st.markdown(f"""
        <div style="
            background-color:white;
            padding:20px;
            border-radius:15px;
            box-shadow:0px 4px 15px rgba(0,0,0,0.1);
            text-align:center;
            width:320px;
            margin:auto;
        ">
            <h3 style="color:#1e3a8a;">üéØ Votre note finale</h3>
            <div class="note-bar">
                <div class="note-fill" style="width:{note_sur_20*5}%; background-color:{color};">
                    {note_sur_20} / 20
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# =========================
# SECTION PROFESSEUR
# =========================
st.divider()
st.subheader("üìä R√©sultats et Statistiques")
password = st.text_input("Mot de passe :", type="password")

if password == "prof2025":
    st.success("‚úÖ Acc√®s autoris√©")

    try:
        if os.path.exists("scores.csv") and os.path.getsize("scores.csv") > 0:
            df = pd.read_csv("scores.csv")
        else:
            df = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])
    except Exception:
        st.error("‚ùå Erreur lors du chargement des donn√©es.")
        df = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])

    if not df.empty:
        classement = df.sort_values(by="Score", ascending=False).reset_index(drop=True)

        top3 = classement.head(3).reset_index(drop=True)
        rangs = ["ü•á Premi√®re place", "ü•à Deuxi√®me place", "ü•â Troisi√®me place"]
        top3["Rang"] = rangs[:len(top3)]

        st.subheader("üèÜ Classement des 3 premiers")
        fig = px.bar(
            top3,
            x="Nom",
            y="Score",
            color="Rang",
            text="Score",
            color_discrete_map={
                "ü•á Premi√®re place": "gold",
                "ü•à Deuxi√®me place": "silver",
                "ü•â Troisi√®me place": "#cd7f32"
            },
            title="üèÖ Les 3 meilleures notes du quiz"
        )
        fig.update_traces(textposition="outside")
        fig.update_layout(xaxis_title="Participants", yaxis_title="Score", showlegend=True)
        st.plotly_chart(fig, use_container_width=True)

        st.subheader("üìã D√©tails des r√©sultats")
        st.dataframe(classement, use_container_width=True)

        gagnant = classement.iloc[0]
        st.markdown(f"üèÖ **{gagnant['Nom']}** est premier avec un score de {gagnant['Score']}/{len(questions)}")

        # --- GRAPHIQUE MODERNE DES QUESTIONS ---
        question_scores = {q: df[q].mean() * 100 for q in questions}
        stats_df = pd.DataFrame({
            "Question": list(question_scores.keys()),
            "Taux de r√©ussite (%)": list(question_scores.values())
        })

        fig2 = px.bar(
            stats_df,
            x="Question",
            y="Taux de r√©ussite (%)",
            text="Taux de r√©ussite (%)",
            color="Taux de r√©ussite (%)",
            color_continuous_scale="Blues",
            title="üìà Taux de r√©ussite par question"
        )
        fig2.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
        fig2.update_layout(xaxis_title=None, yaxis_title=None)
        st.plotly_chart(fig2, use_container_width=True)

        moyenne_globale = round(df["Pourcentage"].mean(), 2)
        st.info(f"üìä Taux de r√©ussite moyen : **{moyenne_globale}%**")

        meilleure = stats_df.loc[stats_df["Taux de r√©ussite (%)"].idxmax()]
        pire = stats_df.loc[stats_df["Taux de r√©ussite (%)"].idxmin()]
        st.success(f"‚úÖ Question la plus r√©ussie : {meilleure['Question']} ({meilleure['Taux de r√©ussite (%)']:.1f}%)")
        st.error(f"‚ö†Ô∏è Question la moins r√©ussie : {pire['Question']} ({pire['Taux de r√©ussite (%)']:.1f}%)")

elif password:
    st.error("Mot de passe incorrect.")

# =========================
# QR CODE PARTAGE
# =========================
st.divider()
st.subheader("QR Code")

url = "https://fads-quiz.app/"
qr = qrcode.make(url)
buf = BytesIO()
qr.save(buf, format="PNG")
st.image(buf.getvalue(), caption="Scannez pour acc√©der au quiz", width=200)
st.write("Ou cliquez sur ce lien :", f"[{url}]({url})")











