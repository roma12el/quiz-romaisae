import streamlit as st
import pandas as pd
from io import BytesIO
import qrcode
import os
import matplotlib.pyplot as plt

# =========================
# CONFIGURATION DE LA PAGE
# =========================
st.set_page_config(
    page_title="Quiz ‚Äì R√©glementation des March√©s Financiers",
    layout="centered"
)

# =========================
# AFFICHAGE DE L'IMAGE D'EN-T√äTE
# =========================
st.image("pag de garde.png", use_container_width=True)
st.title("Quiz sur la R√©glementation des March√©s Financiers et R√¥le des Autorit√©s de March√©")

# =========================
# QUESTIONS DU QUIZ
# =========================
questions = {
    "1Ô∏è‚É£ Quelle institution supervise le march√© financier au Maroc ?":
        ["Bank Al-Maghrib", "Minist√®re des Finances", "AMMC", "CDG", "AMMC"],
    "2Ô∏è‚É£ Quelle est la principale mission de l‚ÄôAMMC ?":
        ["Contr√¥ler la fiscalit√©", "Prot√©ger les investisseurs", "√âmettre la monnaie", "Fixer les taux d‚Äôint√©r√™t", "Prot√©ger les investisseurs"],
    "3Ô∏è‚É£ Quelle autorit√© est responsable de la politique mon√©taire ?":
        ["AMMC", "Bank Al-Maghrib", "CDVM", "CMR", "Bank Al-Maghrib"],
    "4Ô∏è‚É£ Quelle loi encadre le march√© des valeurs mobili√®res au Maroc ?":
        ["Loi 12-03", "Loi 43-12", "Loi 17-95", "Loi 20-19", "Loi 43-12"],
    "5Ô∏è‚É£ Quel est le r√¥le principal d‚Äôune autorit√© financi√®re ?":
        ["Favoriser la sp√©culation", "R√©guler et contr√¥ler les march√©s", "Fixer les prix des actions", "Prot√©ger les banques", "R√©guler et contr√¥ler les march√©s"],
    "6Ô∏è‚É£ Quelle entit√© veille √† la stabilit√© du syst√®me bancaire marocain ?":
        ["Bank Al-Maghrib", "AMMC", "Minist√®re du Commerce", "Tr√©sor G√©n√©ral du Royaume", "Bank Al-Maghrib"],
    "7Ô∏è‚É£ Quelle institution g√®re les cotations √† la Bourse de Casablanca ?":
        ["AMMC", "Bourse de Casablanca", "Bank Al-Maghrib", "CDVM", "Bourse de Casablanca"],
    "8Ô∏è‚É£ Quelle est la mission du Conseil D√©ontologique des Valeurs Mobili√®res (CDVM) avant sa transformation ?":
        ["R√©gulation du march√© financier", "Supervision des banques", "Audit des entreprises publiques", "Fiscalit√© des investisseurs", "R√©gulation du march√© financier"],
    "9Ô∏è‚É£ Quelle autorit√© veille √† la transparence de l‚Äôinformation financi√®re ?":
        ["AMMC", "ONCF", "Minist√®re de l‚ÄôInt√©rieur", "BAM", "AMMC"],
    "üîü Quelle est la principale finalit√© de la r√©glementation des march√©s financiers ?":
        ["Limiter la concurrence", "Prot√©ger les investisseurs et assurer la confiance", "Encourager les monopoles", "R√©duire les taux d‚Äôint√©r√™t", "Prot√©ger les investisseurs et assurer la confiance"]
}

# =========================
# IDENTIT√â DE L'UTILISATEUR
# =========================
st.subheader("Veuillez saisir votre nom et pr√©nom.")

col1, col2 = st.columns([2, 1])
with col1:
    nom = st.text_input("Nom et pr√©nom :")

# üîπ Ajout du champ Genre avec logos jolis
with col2:
    st.write("**Genre :**")
    colf, colm = st.columns(2)
    with colf:
        st.image("https://cdn-icons-png.flaticon.com/512/4140/4140048.png", width=60)
        if st.button("F√©minin üíñ"):
            st.session_state["genre"] = "F√©minin"
    with colm:
        st.image("https://cdn-icons-png.flaticon.com/512/4140/4140037.png", width=60)
        if st.button("Masculin üí™"):
            st.session_state["genre"] = "Masculin"

genre = st.session_state.get("genre", "Non sp√©cifi√©")
st.info(f"üë§ Genre s√©lectionn√© : **{genre}**")

# =========================
# QUIZ
# =========================
st.divider()
st.write("Veuillez r√©pondre √† toutes les questions :")

reponses = {}
score = 0

for question, options in questions.items():
    reponse = st.radio(question, options[:-1], key=question)
    reponses[question] = reponse
    if reponse == options[-1]:
        score += 1

# =========================
# SOUMISSION DU QUIZ
# =========================
if st.button("Soumettre mes r√©ponses"):
    if nom.strip() == "":
        st.warning("Veuillez entrer votre nom et pr√©nom avant de soumettre.")
    else:
        total = len(questions)
        pourcentage = round((score / total) * 100, 2)

        # Pr√©parer la ligne de donn√©es
        result = {q: (1 if reponses[q] == questions[q][-1] else 0) for q in questions}
        data_row = {"Nom": nom, "Genre": genre, "Score": score, "Pourcentage": pourcentage, **result}

        # Gestion s√©curis√©e du fichier CSV
        if os.path.exists("scores.csv") and os.path.getsize("scores.csv") > 0:
            try:
                df_old = pd.read_csv("scores.csv")
            except pd.errors.EmptyDataError:
                df_old = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])
        else:
            df_old = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])

        df = pd.concat([df_old, pd.DataFrame([data_row])], ignore_index=True)
        df.to_csv("scores.csv", index=False)

        st.success(f"{nom}, votre score est de {pourcentage}% ({score}/{total}).")

        # =========================
        # STATISTIQUES PERSONNELLES
        # =========================
        st.divider()
        st.subheader("R√©sultats du quiz")

        note_sur_20 = round((score / total) * 20, 2)
        if note_sur_20 >= 16:
            color = "#4CAF50"
        elif note_sur_20 >= 10:
            color = "#FFC107"
        else:
            color = "#F44336"

        st.markdown(f"""
        <div style="
            background-color: #e0e0e0; 
            border-radius: 15px; 
            padding: 10px; 
            width: 300px; 
            text-align: center;
        ">
            <div style="
                width: {note_sur_20*5}%; 
                background-color: {color}; 
                padding: 15px 0; 
                border-radius: 15px; 
                font-size: 24px; 
                font-weight: bold;
                color: white;
            ">
                {note_sur_20} / 20
            </div>
        </div>
        """, unsafe_allow_html=True)

# =========================
# SECTION PROFESSEUR
# =========================
st.divider()
st.subheader("R√©sultats et Statistiques")
password = st.text_input("Mot de passe enseignant :", type="password")

if password == "prof2025":
    st.success("Acc√®s autoris√©")

    if os.path.exists("scores.csv") and os.path.getsize("scores.csv") > 0:
        try:
            df = pd.read_csv("scores.csv")
        except pd.errors.EmptyDataError:
            df = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])
    else:
        df = pd.DataFrame(columns=["Nom", "Genre", "Score", "Pourcentage", *questions.keys()])

    if not df.empty:
        classement = df.sort_values(by="Score", ascending=False).reset_index(drop=True)
        st.dataframe(classement, use_container_width=True)

        gagnant = classement.iloc[0]
        st.markdown(f"Gagnant actuel : **{gagnant['Nom']}** avec un score de {gagnant['Score']}/{len(questions)}")

        # üîπ Histogramme interactif Top 3
        top3 = classement.head(3)
        top3["Rang"] = ["ü•á Premi√®re place", "ü•à Deuxi√®me place", "ü•â Troisi√®me place"]

        st.subheader("üèÜ Classement des 3 premiers")
        st.table(top3[["Rang", "Nom", "Genre", "Score", "Pourcentage"]])

        fig, ax = plt.subplots()
        ax.bar(top3["Nom"], top3["Score"], color=["gold", "silver", "#cd7f32"])
        ax.set_title("üèÖ Top 3 des meilleurs participants")
        ax.set_xlabel("Participants")
        ax.set_ylabel("Score sur 20")
        st.pyplot(fig)

        # Statistiques par question
        question_scores = {q: df[q].mean() * 100 for q in questions}
        stats_df = pd.DataFrame({
            "Question": list(question_scores.keys()),
            "Taux de r√©ussite (%)": list(question_scores.values())
        })
        st.bar_chart(stats_df.set_index("Question"))

        moyenne_globale = round(df["Pourcentage"].mean(), 2)
        st.info(f"Taux de r√©ussite moyen : {moyenne_globale}%")

        meilleure = stats_df.loc[stats_df["Taux de r√©ussite (%)"].idxmax()]
        pire = stats_df.loc[stats_df["Taux de r√©ussite (%)"].idxmin()]
        st.success(f"Question la plus r√©ussie : {meilleure['Question']} ({meilleure['Taux de r√©ussite (%)']:.1f}%)")
        st.error(f"Question la moins r√©ussie : {pire['Question']} ({pire['Taux de r√©ussite (%)']:.1f}%)")
elif password:
    st.error("Mot de passe incorrect.")

# =========================
# PARTAGE DU QUIZ
# =========================
st.divider()
st.subheader("QR Code")

url = "https://romaquiz.streamlit.app/"
qr = qrcode.make(url)
buf = BytesIO()
qr.save(buf, format="PNG")
st.image(buf.getvalue(), caption="Scannez pour acc√©der au quiz", width=200)
st.write("Ou cliquez sur ce lien :", f"[{url}]({url})")





